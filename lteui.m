function lteui(varargin)

%% If no 'R.xx' input, start the GUI with some random default values
if nargin == 1
    % R.xx input: those values will be used in the initialization part
    Defined = 1;
    cfg = lteRMCDL(varargin{1});
    cfg_eNodeB = cfg;
    cfg_PDSCH = cfg.PDSCH;
else
    % No input so we'll use default values in the initialization part
    Defined = 0;
    cfg_eNodeB = [];
    cfg_PDSCH = [];
end

%% Define all the widgets

f = figure('Visible','off', ...
    'Units','characters',...
    'Position',[70 8 164 40],...
    'Resize','off',...
    'MenuBar','none',...
    'Name','LTE Example Generator');

%  Construct the components:
% Table with the list of parameters
hTableeNodeB = uitable(...
    'Units','characters',...
    'FontSize',12,...
    'CellSelectionCallback',{@Table_CellSelectionCallback}, ...
    'ColumnWidth',{140 90}, ...
    'ColumnName',[], ...
    'Data',{  blanks(0) blanks(0) },...
    'Position',[6 16 50 21],...
    'RowName',[],...
    'Tag','Table'...
    );

% Table with the list of parameters
hTablePDSCH = uitable(...
    'Units','characters',...
    'FontSize',12,...
    'CellSelectionCallback',{@Table_CellSelectionCallback}, ...
    'ColumnWidth',{140 90}, ...
    'ColumnName',[], ...
    'Data',{  blanks(0) blanks(0) },...
    'Position',[58 16 50 21],...
    'RowName',[],...
    'Tag','Table'...
    );

% Table with the list of parameters
hTablePDCCH = uitable(...
    'Units','characters',...
    'FontSize',12,...
    'CellSelectionCallback',{@Table_CellSelectionCallback}, ...
    'ColumnWidth',{140 90}, ...
    'ColumnName',[], ...
    'Data',{  blanks(0) blanks(0) },...
    'Position',[110 29 50 8],...
    'RowName',[],...
    'Tag','Table'...
    );

% Text for all 3 tables
uicontrol('Style','text','String','eNodeB',...
    'Units','characters',...
    'FontSize',12,...
    'FontWeight', 'bold', ...
    'Position',[20,37,20,2]);
uicontrol('Style','text','String','PDSCH',...
    'Units','characters',...
    'FontSize',12,...
    'FontWeight', 'bold', ...
    'Position',[70,37,20,2]);
uicontrol('Style','text','String','PDCCH',...
    'Units','characters',...
    'FontSize',12,...
    'FontWeight', 'bold', ...
    'Position',[120,37,20,2]);

% Pop-up menu to select subframe number
hSubframeSelection = uicontrol(...
    'Units','characters',...
    'Callback',{@SubframeSelection_Callback},...
    'BackgroundColor',[1 1 1],...
    'FontSize',12,...
    'Position',[74 12 30 2],...
    'String',{  'Subframe 0' 'Subframe 1' 'Subframe 2' 'Subframe 3' 'Subframe 4' 'Subframe 5' 'Subframe 6' 'Subframe 7' 'Subframe 8' 'Subframe 9'},...
    'Style','popupmenu',...
    'Value',1,...
    'Tag','SuFrameSelection');

% Visualize grid button
hShowGrid = uicontrol(...
    'Callback',{@ShowGrid_Callback}, ...
    'BackgroundColor',[0.8 0.9 0.5],...
    'Units','characters',...
    'FontSize',12,...
    'Position',[112 12 18 2],...
    'String','Show grid',...
    'Tag','ShowGrid'...
    );

% Generate code button
hGenerateCode = uicontrol(...
    'Callback',{@GenerateCode_Callback}, ...
    'BackgroundColor',[0.8 0.9 0.5],...
    'Units','characters',...
    'FontSize',12,...
    'Position',[132 12 24 2],...
    'String','Generate code',...
    'Tag','GenerateCode'...
    );

% Everything that relates to defining new values for parameters
hChangeParameters = uipanel(...
    'Units','characters',...
    'Title',{  'Parameter Dialog' },...
    'Clipping','on',...
    'Position',[6 10 60 5],...
    'Tag','ChangeParameters'...
    );

hChangeParamDialog = uicontrol(...
    'Units','characters',...
    'Parent', hChangeParameters, ...
    'FontSize',12,...
    'Position',[2 1 40 2],...
    'String','Enter or select new value',...
    'HorizontalAlignment','left', ...
    'Style','text',...
    'Visible', 'off', ...
    'Tag','ChangeParamDialog'...
    );

hPossibleValues = uicontrol(...
    'Units','characters',...
    'Parent', hChangeParameters, ...
    'Callback',{@PossibleValues_Callback},...
    'BackgroundColor',[1 1 1],...
    'FontSize',12,...
    'Position',[34 1 23 2],...
    'String',{  'Pop-up Menu' },...
    'Style','popupmenu',...
    'Value',1,...
    'Visible', 'off', ...
    'Tag','PossibleValues');

hChangeValue = uicontrol(...
    'Units','characters',...
    'Parent', hChangeParameters, ...
    'Callback',{@ChangeValue_Callback},...
    'BackgroundColor',[1 1 1],...
    'FontSize',12,...
    'Position',[34 1 23 2],...
    'HorizontalAlignment','left', ...
    'String',{  'Edit Text' },...
    'Style','edit',...
    'Visible', 'off', ...
    'Tag','ChangeValue');

% Description for parameter
hDescription = uicontrol(...
    'Units','characters',...
    'FontSize',12,...
    'Position',[6 1 153 8],...
    'BackgroundColor',[0.6 0.8 1 ],...
    'String',{  'Description' },...
    'HorizontalAlignment','left', ...
    'Style','text',...
    'Tag','Description'...
    );

% Message window
hMessagePanel = uipanel(...
    'Units','characters',...
    'BackgroundColor',[1 1 1 ],...
    'Title',{  'Messages' },...
    'Clipping','on',...
    'Position',[6 1 143 8],...
    'Visible','Off',...
    'Tag','MessagePanel'...
    );
%     'Position',[71 10 78 16],...

hMessage = uicontrol(...
    'Parent',hMessagePanel,...
    'FontSize',11,...
    'Units','characters',...
    'Position',[0 0 143 7],...
    'BackgroundColor',[1 1 1 ],...
    'String',{  '' },...
    'HorizontalAlignment','left', ...
    'Style','listbox',...
    'Tag','Message'...
    );
%     'Position',[0 0 78 15],...

% Selection of channels to generate and display
hChannelSelect = uipanel(...
    'Units','characters',...
    'Title',{  'Channels and Signals to Generate Code for' },...
    'Clipping','off',...
    'Position',[110 16 50 11],...
    'Tag','ChannelSelect'...
    );

hReferenceSignals = uicontrol(...
    'Parent',hChannelSelect,...
    'Units','characters',...
    'Callback',{@ReferenceSignals_Callback}, ...
    'FontSize',10,...
    'Position',[4 1 25 2],...
    'String','Reference Signals',...
    'Style','checkbox',...
    'Tag','ReferenceSignals'...
    );

hBCH = uicontrol(...
    'Parent',hChannelSelect,...
    'Units','characters',...
    'Callback',{@BCH_Callback}, ...
    'FontSize',10,...
    'Position',[33 5 16 2],...
    'String','BCH',...
    'Style','checkbox',...
    'Tag','BCH'...
    );

hPSS = uicontrol(...
    'Parent',hChannelSelect,...
    'Units','characters',...
    'Callback',{@PSS_Callback}, ...
    'FontSize',10,...
    'Position',[33 3 16 2],...
    'String','PSS/SSS',...
    'Style','checkbox',...
    'Tag','PSS'...
    );

hDMRS = uicontrol(...
    'Parent',hChannelSelect,...
    'Units','characters',...
    'Callback',{@DMRS_Callback}, ...
    'FontSize',10,...
    'Position',[33 1 16 2],...
    'String','DMRS',...
    'Style','checkbox',...
    'Tag','DMRS'...
    );

hCFI = uicontrol(...
    'Parent',hChannelSelect,...
    'Units','characters',...
    'Callback',{@CFI_Callback}, ...
    'FontSize',10,...
    'Position',[4 3 16 2],...
    'String','CFI',...
    'Style','checkbox',...
    'Tag','CFI'...
    );

hPDSCH = uicontrol(...
    'Parent',hChannelSelect,...
    'Units','characters',...
    'Callback',{@PDSCH_Callback}, ...
    'FontSize',10,...
    'Position',[4 7 16 2],...
    'String','PDSCH',...
    'Style','checkbox',...
    'Tag','PDSCH'...
    );

hPDCCH = uicontrol(...
    'Parent',hChannelSelect,...
    'Units','characters',...
    'Callback',{@PDCCH_Callback}, ...
    'FontSize',10,...
    'Position',[4 5 16 2],...
    'String','PDCCH',...
    'Style','checkbox',...
    'Tag','PDCCH'...
    );

hPHICH = uicontrol(...
    'Parent',hChannelSelect,...
    'Units','characters',...
    'Callback',{@PHICH_Callback}, ...
    'FontSize',10,...
    'Position',[33 7 16 2],...
    'String','PHICH',...
    'Style','checkbox',...
    'Tag','PHICH'...
    );

% Code generation options (not shown at start)
hCodegenOptions = uipanel(...
    'Units','characters',...
    'Title',{  'Code generation options' },...
    'Clipping','on',...
    'Position',[110 16 50 11],...
    'Tag','ChannelSelect', ...
    'Visible', 'off' ...
    );


% Include receiver radio button 
hIncludeReceiverRB = uicontrol(...
    'Parent',hCodegenOptions,...
    'Units','characters',...
    'Callback',{@IncludeReceiverRB_Callback}, ...
    'FontSize',10,...
    'Position',[5 7 25 2],...
    'String','Include receiver',...
    'Style','checkbox',...
    'Tag','IncludeReceiverRB'...
    );

% Include receiver radio button 
hIncludeVisualizationRB = uicontrol(...
    'Parent',hCodegenOptions,...
    'Units','characters',...
    'Callback',{@IncludeVisualizationRB_Callback}, ...
    'FontSize',10,...
    'Position',[5 5 35 2],...
    'String','Include grid visualization',...
    'Style','checkbox',...
    'Tag','IncludeVisualizationRB'...
    );

% Include receiver radio button 
hIncludeBitmapRIV = uicontrol(...
    'Parent',hCodegenOptions,...
    'Units','characters',...
    'Callback',{@IncludeBitmapRIV_Callback}, ...
    'FontSize',10,...
    'Position',[5 3 50 2],...
    'String','Include Bitmap/RIV formula',...
    'Style','checkbox',...
    'Tag','IncludeBitmapRIV'...
    );

% Transport block size and code rate (not shown at start)
hPDSCH_PDCCHInfoPanel = uipanel(...
    'Units','characters',...
    'Title',{  'PDSCH & PDCCH Information' },...
    'Clipping','on',...
    'Position',[110 16 50 11],...
    'Tag','PDSCH_PDCCHInfoPanel', ...
    'Visible', 'on' ...
    );


hPDSCH_PDCCHInfo = uicontrol(...
    'Parent',hPDSCH_PDCCHInfoPanel,...
    'FontSize',11,...
    'Units','characters',...
    'Position',[0 0 54 10],...
    'BackgroundColor',[0.5 1 1 ],...
    'String',{  '' },...
    'HorizontalAlignment','left', ...
    'Style','text',...
    'Tag','PDSCH_PDCCHInfo'...
    );


% Create menu items for "Code"
hCode = uimenu(f,'Label','Code   ');
uimenu(hCode,'Label','Generate','Callback',{@GenerateCode_Callback});
% hVisualizeGrid = uimenu(hCode,'Label','Visualize Grid','Callback',{@VisualizeGrid_Callback},'Checked','off');
% hIncludeReceiver = uimenu(hCode,'Label','Include Receiver','Callback',{@IncludeReceiver_Callback},'Checked','off');
% menuhandles = findall(hCode,'type','uimenu');
% set(menuhandles,'HandleVisibility','off')

% Create menu items for "View"
hView = uimenu(f,'Label','View   ');
hViewPDSCHInfo = uimenu(hView,'Label','PDSCH & PDCCH info','Callback',{@ViewPDSCHInfo_Callback},'Checked','on');
hViewChannels = uimenu(hView,'Label','Channel list','Callback',{@ViewChannels_Callback},'Checked','off');
hViewCodegen = uimenu(hView,'Label','Code generation options','Callback',{@ViewCodegen_Callback},'Checked','off');


% Save the handles to widgets that have to be accessed outside their own
% callback
handles.Widgets.figure = f;
handles.Widgets.hTableeNodeB = hTableeNodeB;
handles.Widgets.hTablePDSCH = hTablePDSCH;
handles.Widgets.hTablePDCCH = hTablePDCCH;
handles.Widgets.hSubframeSelection = hSubframeSelection;
handles.Widgets.hChangeValue = hChangeValue;
handles.Widgets.hDescription = hDescription;
handles.Widgets.hMessage = hMessage;
handles.Widgets.hChangeParamDialog = hChangeParamDialog;
handles.Widgets.hPossibleValues = hPossibleValues;
handles.Widgets.hMessagePanel = hMessagePanel;
% handles.Widgets.hVisualizeGrid = hVisualizeGrid;
% handles.Widgets.hIncludeReceiver = hIncludeReceiver;
handles.Widgets.hViewChannels = hViewChannels;
handles.Widgets.hShowGrid = hShowGrid;
handles.Widgets.hDMRS = hDMRS;
handles.Widgets.hChannelSelect = hChannelSelect;
handles.Widgets.hCodegenOptions = hCodegenOptions;
handles.Widgets.hViewCodegen = hViewCodegen;
handles.Widgets.hGenerateCode = hGenerateCode;
handles.Widgets.hPDSCH_PDCCHInfoPanel = hPDSCH_PDCCHInfoPanel;
handles.Widgets.hPDSCH_PDCCHInfo = hPDSCH_PDCCHInfo;
handles.Widgets.hViewPDSCHInfo = hViewPDSCHInfo;

%% Initialization code

% Define tables for the popup menu: eNodeB, PDSCH, PDCCH
% If defined is 1, use parameters from input, otherwise set them to some
% arbitrary value
handles.eNodeB = DefineEnbTable(Defined,cfg_eNodeB);
handles.PDSCH = DefinePDSCHTable(Defined,cfg_PDSCH);
handles.PDCCH = DefinePDCCHTable();

% Check the checkbox for all channels
set(hPDSCH,'Value',1);
handles.ChannelsRequested.PDSCH = 1;
set(hPDCCH,'Value',1);
handles.ChannelsRequested.PDCCH = 1;
set(hPHICH,'Value',1);
handles.ChannelsRequested.PHICH = 1;
set(hCFI,'Value',1);
handles.ChannelsRequested.CFI = 1;
set(hPSS,'Value',1);
handles.ChannelsRequested.PSS = 1;
set(hDMRS,'Value',1);
handles.ChannelsRequested.DMRS = 1;
set(hReferenceSignals,'Value',1);
handles.ChannelsRequested.ReferenceSignals = 1;
set(hBCH,'Value',1);
handles.ChannelsRequested.BCH = 1;

% Set default codegen options
handles.Codegen.VisualizeGrid = 0;
handles.Codegen.IncludeReceiver = 0;
handles.Codegen.IncludeBitmapRIV = 0;

% Run parameter consistency checks but don't print out Message if any value
% changes
handles = EnsureConsistentParams(handles,'NoMessage');

% Update the table that gets displayed
handles = RefreshTableDisplay(handles);
params_PDSCH=handles.PDSCH.Data;
params_eNodeB=handles.eNodeB.Data;
%Make the GUI visible.
set(f,'Visible','on')

guidata(f,handles)




%% Help functions
function enb = DefineEnbTable(Defined,cfg)
%% Define parameters for eNodeB menu.
if Defined
    % Set CSIRefP to some default if field not present 
    if isfield(cfg, 'CSIRefP')
        CSIRefP = cfg.CSIRefP;
    else
        CSIRefP = '1';
    end
    % Set CSIRSConfig to some default if field not present 
    if isfield(cfg, 'CSIRSConfig')
        CSIRSConfig = cfg.CSIRSConfig;
    else
        CSIRSConfig = 0;
    end
    % Set CSIRSPeriod to some default if field not present 
    if isfield(cfg, 'CSIRSPeriod')
        CSIRSPeriod = cfg.CSIRSPeriod;
    else
        CSIRSPeriod = 0;
    end
    if isfield(cfg, 'ZeroPowerCSIRSPeriod')
        ZeroPowerCSIRSPeriod = 'off'; % cfg.ZeroPowerCSIRSPeriod;
    else
        ZeroPowerCSIRSPeriod = 'off';
    end
    enb.Data = struct( ...
        'NDLRB', cfg.NDLRB, ...
        'CellRefP', num2str(cfg.CellRefP), ...
        'NCellID', cfg.NCellID, ...
        'CyclicPrefix', cfg.CyclicPrefix, ...
        'CFI', num2str(cfg.CFI), ...
        'Ng', cfg.Ng, ...
        'PHICHDuration', cfg.PHICHDuration, ...
        'NSubframe', cfg.NSubframe, ...
        'DuplexMode', cfg.DuplexMode, ...
        'CSIRefP', num2str(CSIRefP), ...
        'CSIRSConfig', CSIRSConfig, ...
        'CSIRSPeriod', CSIRSPeriod, ...
        'ZeroPowerCSIRSPeriod', ZeroPowerCSIRSPeriod ...
       );
else
    
    % This is the initial content for the table
    enb.Data = struct( ...
        'NDLRB', 6, ...
        'CellRefP', '4', ...
        'NCellID', 0, ...
        'CyclicPrefix', 'Normal', ...
        'CFI', '3', ...
        'Ng', 'Sixth', ...
        'PHICHDuration', 'Normal', ...
        'NSubframe', 0, ...
        'DuplexMode', 'FDD', ...
        'CSIRefP', '1', ...
        'CSIRSConfig', 0, ...
        'CSIRSPeriod', 0, ...
        'ZeroPowerCSIRSPeriod', 'off' ...
       );
end

% Define multiple choices
% Create empty structure with the same fields
ListFields = fieldnames(enb.Data);
for ii=1:length(ListFields)
    enb.MultipleChoices.(ListFields{ii}) = ''; 
end
enb.MultipleChoices.CellRefP = {'1','2','4'};
enb.MultipleChoices.CyclicPrefix = {'Normal','Extended'};
enb.MultipleChoices.Ng = {'Sixth','Half','One','Two'};
enb.MultipleChoices.PHICHDuration = {'Normal','Extended'};
enb.MultipleChoices.DuplexMode = {'FDD','TDD'};
enb.MultipleChoices.CFI = {'1','2','3'};
enb.MultipleChoices.CSIRefP = {'1','2','4','8'};

% Define description
% Create empty structure with the same fields
for ii=1:length(ListFields)
    enb.Description.(ListFields{ii}) = ''; 
end
enb.Description.NDLRB =  sprintf([...
    'Number of downlink resource blocks\n', ...
    'The standard defines 6 possible choices: 6,15,25,50,75,100']);
enb.Description.CellRefP = sprintf([...
    'Number of Cell-Specific Reference Signal Antenna Ports\n', ...
    'Can be 1, 2 or 4']);
enb.Description.NCellID = sprintf([...
    'Physical Cell ID\n', ...
    'A number between 0 and 503']);
enb.Description.CyclicPrefix = sprintf([...
    'Cyclic prefix type\n', ...
    '''Normal'' or ''Extended''']);
enb.Description.CFI = sprintf([...
    'Channel Format Indicator value: 1, 2, or 3\n', ...
    'Specifies the number of OFDM symbols occupied by the control channel\n', ...
    'If NDLRB<=10, the number is CFI+1']);
enb.Description.Ng = sprintf([...
    'Value used in the computation of the number of PHICH groups\n', ...
    '''Sixth'',''Half'',''One'', or ''Two''']);
enb.Description.PHICHDuration = sprintf([...
    'Duration of the PHICH\n', ...
    '''Normal'' or ''Extended''']);
enb.Description.NSubframe = sprintf([...
    'Subframe number between 0 and 9', ...
    '']);
enb.Description.DuplexMode = sprintf([...
    'Duplex mode: ''FDD'' or ''TDD''\n', ...
    'Not tested with TDD']);
enb.Description.CSIRefP = sprintf([...
    'Number of CSI-RS antenna ports, specified as either 1, 2, 4, or 8.\n', ...
    'Only used when TxScheme is set to Port7-14']);
enb.Description.CSIRSConfig = sprintf([...
    'CSI-RS configuration index, specified as an integer between 0 and 19 (FDD).\n', ...
    'See table 6.10.5.2-1 of TS 36.211\n', ...
    'Only used when TxScheme is set to Port7-14']);
enb.Description.CSIRSPeriod = sprintf([...
    'I_CSI-RS subframe configuration, specified as an integer between 0 and 154.\n', ...
    'See table 6.10.5.3-1 of TS 36.211\n', ...
    'Can also be set to ''on'' or ''off''\n', ...
    'Only used when TxScheme is set to Port7-14']);
enb.Description.ZeroPowerCSIRSPeriod = sprintf([...
    'Zero-power CSI configuration, specified as an integer between 0 and 154.\n', ...
    'Can also be set to ''off'' or ''on''\n', ...
    'Only used when TxScheme is set to Port7-14']);

% All fields for enb are active (inactive fields cannot be changed)
% enb.Active = ones(1,numel(fieldnames(enb.Description)));
% Create structure with the same fields
for ii=1:length(ListFields)
    enb.Active.(ListFields{ii}) = 1; 
end
% Subframe field is not active as it is now in the dropdown menu
enb.Active.NSubframe = 0;

% Define which fields cannot be changed even when they are active i.e.
% when they appear in the list of parameters
% Create  structure with the same fields
for ii=1:length(ListFields)
    enb.CanBeChanged.(ListFields{ii}) = 1; 
end
% Specify the ones that are not editable:
enb.CanBeChanged.ZeroPowerCSIRSPeriod = 0; 

function PDSCH = DefinePDSCHTable(Defined,cfg)
%% Define parameters for PDSCH menu.
if Defined
    % This is the initial content for the table
    % Define parameters
    % Set PMISet to some default if field not present 
    if isfield(cfg, 'PMISet')
        PMISet = cfg.PMISet;
    else
        PMISet = 0;
    end
    % Set W to some default if field not present 
    if isfield(cfg, 'W')
        W = cfg.W;
    else
        W = '1';  % Does nothing
    end
    % Set NTxAnts to some default if field not present 
    if isfield(cfg, 'NTxAnts')
        NTxAnts = cfg.NTxAnts;
    else
        NTxAnts = 1;  
    end
    
    PDSCH.Data = struct(...
        'TxScheme', cfg.TxScheme, ...
        'Modulation', cfg.Modulation{1}, ...  % careful
        'NLayers', cfg.NLayers, ...
        'RNTI', cfg.RNTI, ...
        'RVSeq', ['[' num2str(cfg.RVSeq) ']'], ...
        'RV', cfg.RV, ...
        'PRBSet', ['(' num2str(min(cfg.PRBSet)) ':' num2str(max(cfg.PRBSet)) ')'''], ...
        'PMISet', PMISet, ...
        'NTxAnts', NTxAnts, ...
        'W', W, ...
        'TargetCodeRate', cfg.TrBlkSizes(1)/cfg.CodedTrBlkSizes(1), ...
        'NCodeWords', num2str(size(cfg.Modulation,2)), ...
        'CodedTrBlkSize', cfg.CodedTrBlkSizes(1), ...
        'CodedTrBlkSize2', cfg.CodedTrBlkSizes(1), ...  % Not correct
        'TrBlkSize', num2str(cfg.TrBlkSizes(1)), ...
        'TrBlkSize2', num2str(cfg.TrBlkSizes(1)) ... % Not correct
        );
else
    % This is the initial content for the table
    % Define parameters
    PDSCH.Data = struct(...
        'TxScheme', 'TxDiversity', ...
        'Modulation', 'QPSK', ...
        'NLayers', 4, ...
        'RNTI', 1, ...
        'RVSeq', '[0 1 2 3]', ...
        'RV', 0, ...
        'PRBSet', '(0:5)''', ...
        'PMISet', 0, ...
        'NTxAnts', 1, ...
        'W', '1', ...
        'TargetCodeRate', 0.5, ...
        'NCodeWords', '1', ...
        'CodedTrBlkSize', 480, ...
        'CodedTrBlkSize2', 0, ...
        'TrBlkSize', '152', ...
        'TrBlkSize2', '152' ...
        );
end

% Define multiple choices field for all parameters but only 
% populate it for parameters that have multiple choices
% Create empty structure with the same fields
ListFields = fieldnames(PDSCH.Data);
for ii=1:length(ListFields)
    PDSCH.MultipleChoices.(ListFields{ii}) = ''; 
end
PDSCH.MultipleChoices.TxScheme = {'Port0', 'TxDiversity', 'CDD', 'SpatialMux', 'MultiUser', 'Port5', 'Port7-8', 'Port8', 'Port7-14'};
PDSCH.MultipleChoices.Modulation = {'QPSK','16QAM','64QAM'};
PDSCH.MultipleChoices.RVSeq = {'0' '[0 1]' '[0 1 2]' '[0 1 2 3]'};
PDSCH.MultipleChoices.TrBlkSize = {'152'};  % don't care but not empty
PDSCH.MultipleChoices.TrBlkSize2 = {'152'};  % don't care but not empty
PDSCH.MultipleChoices.NCodeWords = {'1','2'};  % don't care but not empty

% Define description
% Create empty structure with the same fields
for ii=1:length(ListFields)
    PDSCH.Description.(ListFields{ii}) = ''; 
end
PDSCH.Description.TxScheme = sprintf([...
    'Transmission scheme. Possible values are:\n', ...
    '''Port0'', ''TxDiversity'', ''CDD'', ''SpatialMux'', ''MultiUser'',\n'  ...
    '''Port5'', ''Port7-8'', ''Port8'', and ''Port7-14''']);
PDSCH.Description.Modulation = sprintf([...
    'Modulation scheme for the PDSCH\n', ...
    'Can be ''QPSK'',''16QAM'', or ''64QAM''']);
PDSCH.Description.NLayers = sprintf([...
    'Number of layers\n', ...
    'It can only be 1,2,3 or 4 and must be less than CellRefP except\n', ...
    'for Port7-14, when it can take any value from 1 to 8']);
% PDSCH.Description.Rho = sprintf([...
%     'Power offset (dB) for the PDSCH relative to the reference signals\n', ...
%     'Not used for now']);
PDSCH.Description.RNTI = sprintf([...
    'Radio Network Temporary Indentifier.\n', ...
    'A 16-bit value that identifies the mobile in this cell']);
PDSCH.Description.RVSeq = sprintf([...
    'Redundancy Version Sequence\n', ...
    'Defines the sequence of redundancy versions to use for retransmissions\n', ...
    'Example: [0] for no reTx, [0 1 2] for 3 reTx w/ HARQ, [0 0] for chase']);
PDSCH.Description.RV = sprintf([...
    'Redundancy version\n', ...
    'A scalar value that must be one of the values in RVSeq']);
PDSCH.Description.PRBSet = sprintf([...
    'Physical Resource Block Set\n', ...
    'The set of physical resource blocks allocated to the PDSCH\n', ...
    'Must be a subset of 0:NDLRB-1']);
PDSCH.Description.TargetCodeRate = sprintf([...
    'Target code rate for the PDSCH. Value between 0 and 1\n', ...
    'The generated program selects the transport block size that yields\n',...
    'an effective code rate closest the requested value']);
PDSCH.Description.TrBlkSize = sprintf([...
    '(Uncoded) Transport block size in bits\n', ...
    'A number of values are possible depending on the modulation scheme\n',...
    'and the number of resource blocks used for the PDSCH. The value\n',...
    'that yields a code rate closest to the target code rate is selected']);
PDSCH.Description.TrBlkSize2 = sprintf([...
    '(Uncoded) Transport block size in bits for codeword 2\n', ...
    'A number of values are possible depending on the modulation scheme\n',...
    'and the number of resource blocks used for the PDSCH. The value\n',...
    'that yields a code rate closest to the target code rate is selected']);
PDSCH.Description.CodedTrBlkSize = sprintf([...
    'Coded transport block size in bits\n', ...
    'This value is computed from other parameters\n', ...
    'It is the number of bits that fit in the allocated resource blocks']);
PDSCH.Description.CodedTrBlkSize2 = sprintf([...
    'Coded transport block size in bits for codeword 2\n', ...
    'This value is computed from other parameters\n', ...
    'It is the number of bits that fit in the allocated resource blocks']);
PDSCH.Description.PMISet = sprintf([...
    'Precoder Matrix Indication. Scalar between 0 and 15\n', ...
    'Only used when TxScheme is set to SpatialMux or MultiUser']);
PDSCH.Description.NTxAnts = sprintf([...
    'Number of transmit antennas. Must be 1 or more. \n', ...
    'Only used when TxScheme is set to Port5, Port7-8, Port8, or Port7-14']);
PDSCH.Description.W = sprintf([...
    'Weight for beamforming of dimension NLayers-by-NTxAnts. \n', ...
    'Only used when TxScheme is set to Port5, Port7-8, Port8, or Port7-14']);
PDSCH.Description.NCodeWords = sprintf([...
    'Number of codewords: must be 1 or 2 \n']);

% Define which fields are active (inactive fields cannot be changed)
% and they do not appear in the list of parameters
% PDSCH.Active = ones(1,numel(fieldnames(PDSCH.Description)));
% Create structure with the same fields
for ii=1:length(ListFields)
    PDSCH.Active.(ListFields{ii}) = 1; 
end

% Define which fields cannot be changed even when they are active i.e.
% when they appear in the list of parameters
% Create  structure with the same fields
for ii=1:length(ListFields)
    PDSCH.CanBeChanged.(ListFields{ii}) = 1; 
end
% Specify the ones that are not editable
PDSCH.CanBeChanged.TrBlkSize = 0;
PDSCH.CanBeChanged.TrBlkSize2 = 0;
PDSCH.CanBeChanged.CodedTrBlkSize = 0;
PDSCH.CanBeChanged.CodedTrBlkSize2 = 0;

function PDCCH = DefinePDCCHTable()
%% Define parameters for PDCCH menu.
% This is the initial content for the table
% Define parameters
PDCCH.Data = struct(...
    'DCIFormat', 'Format1A', ...
    'AllocationRIV', 26, ...
    'AllocationBitmap', '111', ...
    'PDCCHFormat', '0' ...
    );

% Define multiple choices
% Create empty structure with the same fields
ListFields = fieldnames(PDCCH.Data);
for ii=1:length(ListFields)
    PDCCH.MultipleChoices.(ListFields{ii}) = ''; 
end
PDCCH.MultipleChoices.DCIFormat = {'Format0', ...
    'Format1','Format1A','Format1B','Format1C','Format1D', ...
    'Format2','Format2A','Format2B','Format2C', ...
    'Format3','Format3A','Format4', ...
    };
PDCCH.MultipleChoices.PDCCHFormat = {'0','1','2','3'};

% Define description
for ii=1:length(ListFields)
    PDCCH.Description.(ListFields{ii}) = ''; 
end
PDCCH.Description.DCIFormat = sprintf([...
    'DCI format\n', ...
    'Can be ''Format0'' ,''Format1'', ''Format1A'', ''Format1B'', ''Format1C'',\n' ...
    '''Format1D'', ''Format2'', ''Format2A'', ''Format2B'', ''Format2C'',\n' ...
    '''Format3'', ''Format3A'', or ''Format4''']);
PDCCH.Description.AllocationRIV = sprintf([...
    'Resource allocation value as per TS36.213 section 7.1.6.3\n', ...
    'for resource allocation type 2']);
PDCCH.Description.AllocationBitmap = sprintf([...
    'Bitmap for resource allocation as per TS36.213 section 7.1.6.1\n', ...
    'for resource allocation type 0']);
PDCCH.Description.PDCCHFormat = sprintf([...
    'PDCCH format: 0,1,2 or 3\n', ...
    'Defines the aggregation level in CCEs (Control Channel Elements)\n', ...
    'The level is 2^PDCCHFormat, respectively 1,2,4 and 8']);

% Define which fields are active (inactive fields cannot be changed)
% PDCCH.Active = ones(1,numel(fieldnames(PDCCH.Description)));
% Create structure with the same fields
for ii=1:length(ListFields)
    PDCCH.Active.(ListFields{ii}) = 1; 
end
PDCCH.Active.AllocationBitmap = 0;

% Define which fields cannot be changed even when they are active i.e.
% when they appear in the list of parameters
% Create  structure with the same fields
for ii=1:length(ListFields)
    PDCCH.CanBeChanged.(ListFields{ii}) = 1; 
end
% Specify the ones that are not editable:
PDCCH.CanBeChanged.DCIFormat = 0; 
PDCCH.CanBeChanged.AllocationRIV = 0; 
PDCCH.CanBeChanged.AllocationBitmap = 0; 

function handles = RefreshTableDisplay(handles)
%% This function selects a table
% It copies the content of the reference tables to the currently active
% one, which is handles.Table.
% The reverse operation (saving any change made to handles.Table to the
% reference table) is done in UpdateTable

handles.TablesDisplayed.eNodeB = RemoveInactive(handles.eNodeB);
handles.TablesDisplayed.PDSCH = RemoveInactive(handles.PDSCH);
handles.TablesDisplayed.PDCCH = RemoveInactive(handles.PDCCH);
set(handles.Widgets.hTableeNodeB,'Data',handles.TablesDisplayed.eNodeB.Data);
set(handles.Widgets.hTablePDSCH,'Data',handles.TablesDisplayed.PDSCH.Data);
set(handles.Widgets.hTablePDCCH,'Data',handles.TablesDisplayed.PDCCH.Data);

function handles = UpdateTable(TableNumber, handles)
% This function transfers the changes made to the table that is currently
% displayed in the GUI back to the actual data table (reference)
% Both the data and which fields are active may have been changed and must
% be saved

switch TableNumber
    case 1  % eNodeB
        handles.eNodeB.Data = handles.Table.Data;
        handles.eNodeB.Active = handles.Table.Active;
    case 2  % PDSCH
        handles.PDSCH.Data = handles.Table.Data;
        handles.PDSCH.Active = handles.Table.Active;
        handles.PDSCH.CanBeChanged = handles.Table.CanBeChanged;
    otherwise % PDCCH
        handles.PDCCH.Data = handles.Table.Data;
        handles.PDCCH.Active = handles.Table.Active;
end

function lineNr = findLine(Entry, Cell)
%% This function finds out on which line an entry is in a cell array
lineNr = 0;
ii = 1;
while (lineNr == 0) && (ii <= size(Cell,1))
    if strcmp(Entry,Cell{ii,1})
        lineNr = ii;
    end
    ii = ii + 1;
end


function TBS = ComputeTBS(handles)
% Pack all info into a structure
P = SummarizeInfo(handles,true);

[~,info] = ltePDSCHIndices(P.eNodeB, P.PDSCH, P.PDSCH.PRBSet);
TBS = info.G;

function P = SummarizeInfo(handles,flat)
P = struct;
% Create all the fields for all tables

% Get list of tables
ListTables = {'eNodeB' 'PDSCH' 'PDCCH'};

% How to determine the type of the field:
% If the field is a scalar, str2double returns NaN, or isnumeric works
% To differentiate between a real string and a string such as '1:4', one
% can use str2num: it returns empty for a character string and an array of
% values for a MATLAB array

for tableNr = 1:numel(ListTables)
    Data = handles.(ListTables{tableNr}).Data;
    Description = handles.(ListTables{tableNr}).Description;
    Active = handles.(ListTables{tableNr}).Active;
    
    ListFields = fieldnames(Data);
    for ii=1:numel(ListFields)
        field = ListFields{ii};
        Value = Data.(field);
        if flat  % when called from ComputeTBS
            % Convert string representing numeric value to actual numeric
            % values: ~isnumeric means it's not already a numeric, so it's
            % a string. ~isempty(str2num(..)) means it represents a number
            % and not a string such as 'QPSK'
            if ~isnumeric(Value) && ~isempty(str2num(Value))
                P.(ListTables{tableNr}).(field) = str2num(Value);
            else
                % If it is a true string value or a numeric already, pass
                % it untouched
                P.(ListTables{tableNr}).(field) = Value;
            end
        else
            if isnumeric(Value)
                Type = 'scalar';
            elseif isempty(str2num(Value))
                Type = 'string';
            else
                Type = 'vector';
            end
            P.(ListTables{tableNr}).(field).value = Value;
            P.(ListTables{tableNr}).(field).description = Description.(field);
            P.(ListTables{tableNr}).(field).Type = Type;
            P.(ListTables{tableNr}).(field).Active = Active.(field);
        end
    end
end

% If there are two codewords, adjust the Modulation field
if strcmp(handles.PDSCH.Data.NCodeWords,'2')
    if flat
        P.PDSCH.Modulation = repmat({P.PDSCH.Modulation},1,2);
    else
        P.PDSCH.Modulation.value = repmat({P.PDSCH.Modulation.value},1,2);
        P.PDSCH.Modulation.Type = 'cell';
    end
end


%% Callback functions
function SubframeSelection_Callback(source, eventdata)
% Selects the subframe number and updates the TBS accordingly
handles = guidata(gcbo);
SubframeNr = get(source,'Value')-1;
handles.eNodeB.Data.NSubframe = SubframeNr;

% % Update original table to reflect modified values
% handles = UpdateTable(handles.Table.CurrentNumber, handles);

% Run parameter consistency checks
handles = EnsureConsistentParams(handles);

% Refresh selected table values
handles = RefreshTableDisplay(handles);

% handles = RefreshTableDisplay(handles);
guidata(gcbo, handles);


function Table_CellSelectionCallback(source, eventdata)
% This function is called when a line of the parameter table is selected
handles = guidata(gcbo);

if isequal(source,handles.Widgets.hTableeNodeB)
        handles.Table = handles.eNodeB;
        handles.TableDisplay = handles.TablesDisplayed.eNodeB;
        handles.Table.CurrentNumber = 1;
elseif isequal(source,handles.Widgets.hTablePDSCH)
        handles.Table = handles.PDSCH;
        handles.TableDisplay = handles.TablesDisplayed.PDSCH;
        handles.Table.CurrentNumber = 2;
else
        handles.Table = handles.PDCCH;
        handles.TableDisplay = handles.TablesDisplayed.PDCCH;
        handles.Table.CurrentNumber = 3;
end
    
    % Get the list of possible fields
ListFields = fieldnames(handles.Table.Data);
% If a cell is selected
if ~isempty(eventdata.Indices)
    % Erase display of Message window
    DisplayMessage('');
    % Which row is selected
    rowNumber = eventdata.Indices(1);
    % Save it to be able to clear it later
    handles.TablesDisplayed.Highlight.rowNumber = rowNumber;
    handles.TablesDisplayed.Highlight.TableNumber = handles.Table.CurrentNumber;
    % Get name of the corresponding field
    field = handles.TableDisplay.Data{rowNumber,1};
    % Map this value to the line of the complete table that includes
    % inactive fields
    rowNumber = handles.TableDisplay.Mapping(rowNumber);
    % Store that value
    handles.Table.CurrentSelection = field;
    % If parameter is inactive because not needed with current
    % configuration, hide all options to change it
    if ~handles.Table.Active.(field) 
        % Prevent editing of derived fields: turn off data entry display
        set(handles.Widgets.hPossibleValues,'Visible','off');
        set(handles.Widgets.hChangeValue,'Visible','off');
        set(handles.Widgets.hChangeParamDialog,'Visible','off' );        
    % If MultipleChoice value is not empty, then we recognize a
    % parameter with a list of choices.
    % Make popup menu visible and hide scalar entry
    elseif ~isempty(handles.Table.MultipleChoices.(field))
        % Set list of possible choices in popup menu
        set(handles.Widgets.hPossibleValues,'String',handles.Table.MultipleChoices.(field));
        set(handles.Widgets.hPossibleValues,'Visible','on');
        % Turn off edit box used for non popup menu case
        set(handles.Widgets.hChangeValue,'Visible','off');
        [~,position] = ismember(handles.Table.Data.(field), handles.Table.MultipleChoices.(field));
        if position > 0
            set(handles.Widgets.hPossibleValues,'Value',position);
        else
            set(handles.Widgets.hPossibleValues,'Value',1);
        end
        % Change dialog for data entry
        if handles.Table.CanBeChanged.(field)
            set(handles.Widgets.hChangeParamDialog,'String','Select from the list:' )
        else
            set(handles.Widgets.hChangeParamDialog,'String','Do not change' )
        end
        set(handles.Widgets.hChangeParamDialog,'Visible','on' )
        
    else
        % This entry is not multiple choices
        % Remove list of choices from popup menu and make it invisible
        set(handles.Widgets.hPossibleValues,'String',' ');
        set(handles.Widgets.hPossibleValues,'Visible','off');
        % Display current entry in edit box and turn on edit box
        set(handles.Widgets.hChangeValue,'String',handles.Table.Data.(field));
        set(handles.Widgets.hChangeValue,'Visible','on');
        % Change dialog for data entry
        if handles.Table.CanBeChanged.(field)
            set(handles.Widgets.hChangeParamDialog,'String','Enter a new value:' )
        else
            set(handles.Widgets.hChangeParamDialog,'String','Do not change' )
        end
        set(handles.Widgets.hChangeParamDialog,'Visible','on' )
    end
    % Display description
    set(handles.Widgets.hDescription,'String',handles.Table.Description.(field));
    handles.Widgets.hMessagePanel.Visible='off';
    handles.Widgets.hDescription.Visible='on';
    guidata(gcbo, handles);
end


function DisplayMessage(message,Type)
if nargin == 1
    Type = 'dontcare';
end
handles = guidata(gcbo);
if isempty(message)
    set(handles.Widgets.hMessage, 'BackgroundColor',[1 1 1 ])
    set(handles.Widgets.hMessagePanel, 'BackgroundColor',[1 1 1 ])
else
    handles.Widgets.hMessagePanel.Visible='on';
    handles.Widgets.hDescription.Visible='off';
    if strcmp(Type,'Info')
        set(handles.Widgets.hMessage, 'BackgroundColor',[0.6 1 0.6 ])
        set(handles.Widgets.hMessagePanel, 'BackgroundColor',[0.6 1 0.6 ])
    else
        set(handles.Widgets.hMessage, 'BackgroundColor',[0.8 0.9 0.5 ])
        set(handles.Widgets.hMessagePanel, 'BackgroundColor',[0.8 0.9 0.5 ])
    end
    set(handles.Widgets.hMessage,'String',message);
end
guidata(gcbo, handles);


function ChangeValue_Callback(source, eventdata)
handles = guidata(gcbo);
Value = get(source,'String');
if ~isnan(str2double(Value))
    Value = str2double(Value);
end

% Assign value entered into Parameter Dialog to variable currently selected
% in the table. The update to the table displayed (i.e. the table minus the
% inactive fields) takes place in "RefreshTableDisplay" below
if handles.Table.CanBeChanged.(handles.Table.CurrentSelection)
    handles.Table.Data.(handles.Table.CurrentSelection) = Value;
else
    % But if value cannot be changed
    set(source,'String',handles.Table.Data.(handles.Table.CurrentSelection));
end

% Update original table to reflect modified values
handles = UpdateTable(handles.Table.CurrentNumber, handles);

% Run parameter consistency checks
handles = EnsureConsistentParams(handles);

% Refresh selected table values
handles = RefreshTableDisplay(handles);

guidata(gcbo, handles);



function PossibleValues_Callback(source, eventdata)
% This function is called when selecting a value from a list of possible
% values in the dialog
handles = guidata(gcbo);
contents = cellstr(get(source,'String'));
Value = contents{get(source,'Value')};

% Assign value entered into Parameter Dialog to variable currently selected
% in the table. The update to the table displayed (i.e. the table without the
% inactive fields) takes place in "RefreshTableDisplay" below
if handles.Table.CanBeChanged.(handles.Table.CurrentSelection)
    handles.Table.Data.(handles.Table.CurrentSelection) = Value;
else
    % But if value cannot be changed, ignore new choice and set the display
    % back to existing value
    ValueToPreserve = handles.Table.Data.(handles.Table.CurrentSelection);
    % Find which element of the list corresponds to the value to preserve
    [~,loc] = ismember(ValueToPreserve,contents);
    set(source,'Value',loc);
end

% Update original table to reflect modified values
handles = UpdateTable(handles.Table.CurrentNumber, handles);

% Run parameter consistency checks
handles = EnsureConsistentParams(handles);

% Refresh selected table values
handles = RefreshTableDisplay(handles);

guidata(gcbo, handles);


function GenerateCode_Callback(source, eventdata)
handles = guidata(gcbo);

% Pack all info into a structure
P = SummarizeInfo(handles,false);
P.Signals = handles.ChannelsRequested;
P.Codegen = handles.Codegen;
%% HZ additions
makeCodeHz(P);
makeCodeTx(P);
makeCodeCh;
makeCodeRx(P);
%%
outFile = makeCode(P);
message = sprintf('Generated %s', outFile);
DisplayMessage(message,'Info');
eval(sprintf('clear %s',outFile));
% Run the code
eval(sprintf('%d;',outFile(1:end-2)));
% Edit it
% eval(sprintf('edit %s',outFile));

function ShowGrid_Callback(source, eventdata)
handles = guidata(gcbo);

% Pack all info into a structure
P = SummarizeInfo(handles,false);
P.Signals = handles.ChannelsRequested;
P.Codegen.VisualizeGrid = 1;
P.Codegen.IncludeReceiver = 0;  % Do not include receiver in generated code
P.Codegen.IncludeBitmapRIV = 0;  % Do not include computation in generated code

outFile = makeCode(P);
message = '';
DisplayMessage(message,'Info');
% Clear file and rename it
movefile(outFile,'CodeForVisualization.m');
eval(sprintf('clear CodeForVisualization.m'));
% Run it
CodeForVisualization;

%% Collect the information from all the channel check boxes
% The value specifies whether to generate code for a given channel
function ReferenceSignals_Callback(source, eventdata)
handles = guidata(gcbo);
Value = get(source,'Value');
handles.ChannelsRequested.ReferenceSignals = Value;
guidata(gcbo, handles);

function BCH_Callback(source, eventdata)
handles = guidata(gcbo);
Value = get(source,'Value');
handles.ChannelsRequested.BCH = Value;
guidata(gcbo, handles);

function PSS_Callback(source, eventdata)
handles = guidata(gcbo);
Value = get(source,'Value');
handles.ChannelsRequested.PSS = Value;
guidata(gcbo, handles);

function DMRS_Callback(source, eventdata)
handles = guidata(gcbo);
Value = get(source,'Value');
handles.ChannelsRequested.DMRS = Value;
guidata(gcbo, handles);

function CFI_Callback(source, eventdata)
handles = guidata(gcbo);
Value = get(source,'Value');
handles.ChannelsRequested.CFI = Value;
guidata(gcbo, handles);

function PDSCH_Callback(source, eventdata)
handles = guidata(gcbo);
Value = get(source,'Value');
handles.ChannelsRequested.PDSCH = Value;
guidata(gcbo, handles);

function PDCCH_Callback(source, eventdata)
handles = guidata(gcbo);
Value = get(source,'Value');
handles.ChannelsRequested.PDCCH = Value;
guidata(gcbo, handles);

function PHICH_Callback(source, eventdata)
handles = guidata(gcbo);
Value = get(source,'Value');
handles.ChannelsRequested.PHICH = Value;
guidata(gcbo, handles);

function IncludeReceiverRB_Callback(source, eventdata)
handles = guidata(gcbo);
Value = get(source,'Value');
handles.Codegen.IncludeReceiver = Value;
guidata(gcbo, handles);

function IncludeVisualizationRB_Callback(source, eventdata)
handles = guidata(gcbo);
Value = get(source,'Value');
handles.Codegen.VisualizeGrid = Value;
guidata(gcbo, handles);


function IncludeBitmapRIV_Callback(source, eventdata)
handles = guidata(gcbo);
Value = get(source,'Value');
handles.Codegen.IncludeBitmapRIV = Value;
guidata(gcbo, handles);

% function VisualizeGrid_Callback(source, eventdata)
% handles = guidata(gcbo);
% Value = get(handles.Widgets.hVisualizeGrid,'Checked');
% % Flip on and off
% if strcmp(Value,'on')
%     Value = 'off'; IsChecked = 0;
% else
%     Value = 'on'; IsChecked = 1;
% end
% set(handles.Widgets.hVisualizeGrid,'Checked',Value);
% handles.VisualizeGrid = IsChecked;
% guidata(gcbo, handles);
% 
% function IncludeReceiver_Callback(source, eventdata)
% handles = guidata(gcbo);
% Value = get(handles.Widgets.hIncludeReceiver,'Checked');
% % Flip on and off
% if strcmp(Value,'on')
%     Value = 'off'; IsChecked = 0;
% else
%     Value = 'on'; IsChecked = 1;
% end
% set(handles.Widgets.hIncludeReceiver,'Checked',Value);
% handles.IncludeReceiver = IsChecked;
% guidata(gcbo, handles);

function ViewPDSCHInfo_Callback(source, eventdata)
handles = guidata(gcbo);
set(handles.Widgets.hViewPDSCHInfo,'Checked','on');
set(handles.Widgets.hViewChannels,'Checked','off');
set(handles.Widgets.hViewCodegen,'Checked','off');
handles.Widgets.hCodegenOptions.Visible = 'off';
handles.Widgets.hChannelSelect.Visible = 'off';
handles.Widgets.hPDSCH_PDCCHInfoPanel.Visible = 'on';
guidata(gcbo, handles);

function ViewChannels_Callback(source, eventdata)
handles = guidata(gcbo);
set(handles.Widgets.hViewChannels,'Checked','on');
set(handles.Widgets.hViewCodegen,'Checked','off');
set(handles.Widgets.hViewPDSCHInfo,'Checked','off');
handles.Widgets.hPDSCH_PDCCHInfoPanel.Visible = 'off';
handles.Widgets.hCodegenOptions.Visible = 'off';
handles.Widgets.hChannelSelect.Visible = 'on';
guidata(gcbo, handles);

function ViewCodegen_Callback(source, eventdata)
handles = guidata(gcbo);
set(handles.Widgets.hViewChannels,'Checked','off');
set(handles.Widgets.hViewCodegen,'Checked','on');
set(handles.Widgets.hViewPDSCHInfo,'Checked','off');
handles.Widgets.hPDSCH_PDCCHInfoPanel.Visible = 'off';
handles.Widgets.hChannelSelect.Visible = 'off';
handles.Widgets.hCodegenOptions.Visible = 'on';
guidata(gcbo, handles);

function VisualizeGrid_Callback_hide(source, eventdata)
handles = guidata(gcbo);
Value = get(source,'Value');
handles.VisualizeGrid = Value;
guidata(gcbo, handles);

function TableDisplay = RemoveInactive(Table)
% This function creates a table with only active fields.
% This table is the one used for display.
% Of course, we need to then know when selecting a line of the displayed
% table which line of the full table it corresponds to.
% This is the purpose of the Mapping array

% Get info about active/inactive fields
ListFields = fieldnames(Table.Active);
L = numel(ListFields);
% L = sum(Table.Active);
% N = Length of the data without inactive fields
N = 0;
for ii=1:L
    field = ListFields{ii};
    N = N+Table.Active.(field);
end

TableDisplay.Data = cell(N,2);
TableDisplay.Description = cell(N,1);
TableDisplay.MultipleChoices = cell(N,1);
TableDisplay.Mapping = zeros(N,1);
count = 1;
for ii=1:L
    field = ListFields{ii};
    if Table.Active.(field)
        
        % Handle case of modulation separately: only display 1 scheme even
        % for the case of 2 codewords
        if strcmp(field,'Modulation')
            if iscell(Table.Data.Modulation)
                Value = Table.Data.Modulation(1);
            else
                Value = {Table.Data.Modulation};
            end
        else
            Value = {Table.Data.(field)};
        end
        
        TableDisplay.Data(count,1) = {field};
        TableDisplay.Data(count,2) = Value;
        TableDisplay.Description(count) = {Table.Description.(field)};
        TableDisplay.MultipleChoices(count) = {Table.MultipleChoices.(field)};
        TableDisplay.Mapping(count) = ii;
        count = count+1;
    end
end

function message = DetectActiveChange(message,handles)
% This function detects any change in the active fields of any structure
% and generates a message for it
message = AddChangesToMessage(message,handles,'PDSCH');
message = AddChangesToMessage(message,handles,'eNodeB');
message = AddChangesToMessage(message,handles,'PDCCH');

function message = AddChangesToMessage(message,handles,tableName)
ListFields = fieldnames(handles.ActiveInitial.(tableName));
ListRemoved = '';
ListAdded = '';
for ii=1:numel(ListFields)
    field = ListFields{ii};
    if handles.ActiveInitial.(tableName).(field) == 1 && ...
            handles.ActiveFinal.(tableName).(field) == 0
        ListRemoved = sprintf('%s%s,', ListRemoved, field);
    end
    if handles.ActiveInitial.(tableName).(field) == 0 && ...
            handles.ActiveFinal.(tableName).(field) == 1
        ListAdded = sprintf('%s%s,', ListAdded, field);
    end
end
if ~isempty(ListRemoved),
    ListRemoved = ListRemoved(1:end-1);
    message = sprintf('%s%s fields removed: %s\n',message,tableName,ListRemoved);
end
if ~isempty(ListAdded),
    ListAdded = ListAdded(1:end-1);
    message = sprintf('%s%s fields added: %s\n',message,tableName,ListAdded);
end

